--SELECT
SELECT * FROM TAB;
SELECT * FROM EMP;
SELECT EMPNO, ENAME, JOB, SAL FROM EMP;

SELECT * FROM DEPT;
SELECT DEPTNO, DNAME, LOC FROM DEPT;
SELECT DNAME FROM DEPT;

DESC EMP;
DESC DEPT;
--컬럼연산

SELECT EMPNO, ENAME, SAL , SAL*1.1, HIREDATE  FROM EMP;
--숫자 리터럴(Literal) : 1.1, 23, 567657, 0.02
--문자 리터럴(Literal) : '문자', 'ABC', 'abc'
SELECT EMPNO, '김경호', 1004, '강사' FROM EMP;
SELECT EMPNO, ENAME, SAL*2, 3*4 FROM EMP;

--컬럼별칭(alias)
SELECT EMPNO AS 사원번호, ENAME AS 사원이름, SAL AS 월급, SAL*12 AS 연봉 FROM EMP;
--AS생략가능
SELECT EMPNO 사원번호, ENAME 사원이름, SAL 월급, SAL*12 연봉 FROM EMP;
--컬럼 공백만들기 (한개의 컬럼은 반드시 한개의 공백만 존재한다. 오라클에서 " "는 alias 에서만 사용한다 문자리터널은 ' ' 사용한다.)
SELECT '김경호' "사원 번호", ENAME "사원 이름", SAL "월급", SAL*12 "연봉" FROM EMP;

--null과의 연산은 null
SELECT EMPNO, ENAME, SAL, COMM, SAL+COMM "총급여" FROM EMP;
--??????
--문자 연결 연산자( || )
SELECT '김', '경', '호' FROM DEPT;
--DUAL
SELECT '김'||'경'||'호' FROM DUAL;
SELECT 34*6756 FROM DUAL;
SELECT * FROM DUAL;
DESC DUAL;

SELECT EMPNO, ENAME||'의 직급은 '||JOB||' 입니다.' "사원설명" FROM EMP;
-- '(single quot) --->의 escaping ''
SELECT '김', '"', '''사랑''', '''' FROM DUAL;
--DISTINCT(중복행제거)
SELECT JOB FROM EMP;
SELECT DISTINCT JOB FROM EMP;
SELECT DISTINCT JOB, ENAME FROM EMP;

--WHERE

SELECT EMPNO, ENAME, JOB, DEPTNO
FROM EMP
WHERE 1=1;

SELECT EMPNO, ENAME, JOB, DEPTNO
FROM EMP
WHERE 1<>1;

SELECT EMPNO, ENAME, JOB, DEPTNO
FROM EMP
WHERE DEPTNO=30;

SELECT EMPNO, ENAME, JOB, DEPTNO
FROM EMP
WHERE JOB='SALESMAN';

SELECT EMPNO, ENAME, JOB, DEPTNO, HIREDATE
FROM EMP
WHERE HIREDATE='1981/09/08';

SELECT * FROM EMP WHERE SAL >= 2000;
SELECT * FROM EMP WHERE JOB ^= 'SALESMAN';
SELECT * FROM EMP WHERE JOB != 'SALESMAN';
SELECT * FROM EMP WHERE JOB <> 'SALESMAN';

--IS NULL, IS NOT NULL
SELECT * FROM EMP WHERE MGR IS NULL;
SELECT * FROM EMP WHERE MGR IS NOT NULL;
SELECT * FROM EMP WHERE COMM IS NULL;
SELECT * FROM EMP WHERE COMM IS NOT NULL;

--BETWEEN
SELECT * FROM EMP WHERE SAL BETWEEN 1000 AND 2000;
SELECT * FROM EMP WHERE SAL >= 1000 AND SAL <=2000;

--IN
SELECT * FROM EMP WHERE EMPNO IN(7369, 7788, 7839);
SELECT * FROM EMP WHERE EMPNO = 7369 OR EMPNO = 7788 OR EMPNO = 7839;
SELECT * FROM EMP WHERE JOB IN('SALESMAN', 'CLERK');
SELECT * FROM EMP WHERE JOB = 'SALESMAN' OR JOB = 'CLERK';

--LIKE연산( %, _ ) [ %, _  <--- 이연산자는 패턴 매칭 연산자 라 불린다.]
SELECT EMPNO, ENAME, SAL FROM EMP WHERE ENAME LIKE 'SMITH';
SELECT EMPNO, ENAME, SAL FROM EMP WHERE ENAME LIKE '____';
SELECT EMPNO, ENAME, SAL FROM EMP WHERE ENAME LIKE 'A%';
SELECT EMPNO, ENAME, SAL FROM EMP WHERE ENAME LIKE '%T%';
SELECT EMPNO, ENAME, SAL FROM EMP WHERE ENAME LIKE '%T_';
SELECT EMPNO, ENAME, SAL FROM EMP WHERE ENAME LIKE '_L%';
SELECT EMPNO, ENAME, SAL FROM EMP WHERE ENAME LIKE '_L___';

--ESCAPE 
SELECT EMPNO, ENAME, SAL FROM EMP WHERE ENAME LIKE '\_%' ESCAPE '\';
SELECT EMPNO, ENAME, SAL FROM EMP WHERE ENAME LIKE 'X_K%' ESCAPE 'X';
SELECT EMPNO, ENAME, SAL FROM EMP WHERE ENAME LIKE '%\%%' ESCAPE '\';

--문자를 비교할때도 기준을 문자로 숫자를 비교할때도 기준을 문자로
SELECT * FROM EMP WHERE HIREDATE LIKE '____/12/__';
SELECT * FROM TEMP WHERE EMP_ID LIKE '1996____' AND LEV != '과장';

--논리연산
SELECT * FROM EMP WHERE JOB = 'SALESMAN' AND SAL >= 1500;
SELECT * FROM EMP WHERE SAL >= 5000 OR SAL <= 1000;

--정렬
SELECT EMPNO, ENAME, JOB, HIREDATE      --3     데이터 SELECT(찾기)
FROM EMP    --1     EMP 테이블에서
WHERE 1 = 1     --2     조건(참)에 맞는 
ORDER BY EMPNO DESC;        --4     찾은 데이터를 정렬

SELECT EMPNO, ENAME, JOB, HIREDATE
FROM EMP
WHERE 1 = 1
ORDER BY ENAME;

SELECT EMPNO, ENAME, JOB, HIREDATE
FROM EMP
WHERE 1 = 1
ORDER BY JOB ASC, ENAME ASC;        -- JOB 오름차순정렬 후 ENAME 로 2차정렬

SELECT EMPNO, ENAME, JOB, HIREDATE
FROM EMP
WHERE 1 = 1
ORDER BY HIREDATE ASC;

SELECT EMPNO, ENAME, SAL, SAL*12
FROM EMP
WHERE 1 = 1
ORDER BY SAL*12 DESC;

SELECT EMPNO, ENAME, SAL 월급, SAL*12 연봉
FROM EMP
WHERE 1 = 1
ORDER BY 연봉 DESC;

SELECT EMPNO, ENAME, SAL 월급, SAL*12 연봉      --COLUMN INDEX NUMBER 1, 2, 3, 4  SQL은 INDEX NUMBER를  0으로 시작하지않는다.
FROM EMP
WHERE 1 = 1
ORDER BY 4 DESC;        --여기서 4 는 위 구문 4번째 컬럼을 말한다.
